(function() {

    var ABILITY_CAN_BE_UPGRADED = AbilityLearnResult_t.ABILITY_CAN_BE_UPGRADED;

    var playerId = Players.GetLocalPlayer();
    var heroEntityId = -1;
    var abilityPoints = 0;

	GameEvents.Subscribe('hero_spawned', OnHeroSpawned);

    function OnHeroSpawned(event) {

        heroEntityId = Players.GetPlayerHeroEntityIndex(playerId);

        $.Schedule(0.01, function Update() {
            $.Schedule(0.01, Update);
            abilityPoints = Entities.GetAbilityPoints(heroEntityId);

            if (Game.IsInAbilityLearnMode() && !CanLearnAnything(heroEntityId)) {
                Game.EndAbilityLearnMode();
            }
        });
    }

    function CanLearnAnything(entityId) {
        return HasAnyUpgradableAbility(entityId) || HasAnyUpgradableTalent(entityId);
    }

    function HasAnyUpgradableAbility(entityId) {
        for (var i = 0; i < 6; i++) {
            var abilityId = Entities.GetAbility(entityId, i);
            var upgradable = abilityId !== -1
                && Abilities.CanAbilityBeUpgraded(abilityId) === ABILITY_CAN_BE_UPGRADED;
            if (upgradable) {
                return true;
            }
        }
        return false;
    }

    function HasAnyUpgradableTalent(entityId) {
        var talentIds = GetTalentIds(entityId);
        for (var i = 0; i < 4; i++) {
            if (CanLearnOneOfTalents(10 + i * 5, talentIds[i * 2], talentIds[i * 2 + 1])) {
                return true;
            }
        }
        return false;
    }

    function CanLearnOneOfTalents(neededLevel, talentId1, talentId2) {
        return Entities.GetLevel(heroEntityId) >= neededLevel
            && Abilities.GetLevel(talentId1) === 0
            && Abilities.GetLevel(talentId2) === 0;
    }

    function GetTalentIds(entityId) {
        var ids = [];
        for (var i = 0; i < 24; i++) {
            var abilityId = Entities.GetAbility(entityId, i);
            var abilityName = Abilities.GetAbilityName(abilityId);
            if (abilityId !== -1 && abilityName.indexOf('special_bonus') === 0) {
                ids.push(abilityId);
            }
        }
        return ids;
    }

})();